_.x_ActorsRelations
Зачем экспонента и от чего?
ctr_gender, high, negative - дробные, как получаются?

root
|-- date: 				string (nullable = true)
|-- instanceId: 			struct (nullable = false)
| |-- userId: 				integer (nullable = true)
| |-- objectType: 			string (nullable = true)
| |-- objectId: 			integer (nullable = true)

|-- audit: 				struct (nullable = true)
| |-- pos: 				long (nullable = true)
| |-- timestamp: 			long (nullable = true)
| |-- timePassed: 			long (nullable = true)
| |-- experiment: 			string (nullable = true) -
| |-- resourceType: 			long (nullable = true) -
| |-- weights: 				struct (nullable = true)
| | |-- ageMs:				double (nullable = true)
| | |-- ctr_gender: 			double (nullable = true)
| | |-- ctr_high: 			double (nullable = true)
| | |-- ctr_negative: 			double (nullable = true)
| | |-- dailyRecency: 			double (nullable = true) - что-то про возраст
| | |-- feedStats: 			double (nullable = true) - вес автора относительно объекта по какой-то формуле
| | |-- friendLikes: 			double (nullable = true)
| | |-- friendLikes_actors: 		double (nullable = true) - уникальные друзья
| | |-- isFavorite: 			double (nullable = true)
| | |-- likersFeedStats_hyper: 		double (nullable = true) - фидстат всех кто лайкал относительно пользователя
| | |-- likersSvd_prelaunch_hyper: 	double (nullable = true) - svd по тем кто лайкал
| | |-- matrix: 			double (nullable = true) - суммарный прогноз модели
| | |-- ownerAge: 			double (nullable = true)
| | |-- partAge: 			double (nullable = true) - форвард
| | |-- partCtr: 			double (nullable = true)
| | |-- partSvd: 			double (nullable = true)
| | |-- relationMasks: 			double (nullable = true)
| | |-- svd_prelaunch: 			double (nullable = true)
| | |-- userAge: 			double (nullable = true)
| | |-- x_ActorsRelations: 		long (nullable = true) - маски отношений ксор
| | |-- svd_prelaunch_nobi: 		double (nullable = true)
| | |-- ldaIntersection: 		double (nullable = true) - тематики
| | |-- friendCommentActors: 		double (nullable = true)
| | |-- friendCommentFeeds: 		double (nullable = true)
| | |-- friendCommenters: 		double (nullable = true)
| | |-- isPymk: 			double (nullable = true) - потенциальный друг

|-- metadata: 				struct (nullable = false)
| |-- ownerId: 				integer (nullable = true)
| |-- ownerType: 			string (nullable = true)
| |-- createdAt: 			long (nullable = true)
| |-- authorId: 			integer (nullable = true)
| |-- applicationId: 			long (nullable = true)
| |-- numCompanions: 			integer (nullable = true)
| |-- numPhotos: 			integer (nullable = true)
| |-- numPolls: 			integer (nullable = true)
| |-- numSymbols: 			integer (nullable = true)
| |-- numTokens: 			integer (nullable = true)
| |-- numVideos: 			integer (nullable = true)
| |-- platform: 			string (nullable = true)
| |-- totalVideoLength: 		integer (nullable = true)
| |-- options: 				array (nullable = true)
| | |-- element: 			string (containsNull = true) - признаки

|-- relationsMask: 			long (nullable = true)

|-- userOwnerCounters: 			struct (nullable = true)
| |-- ignoredField: 			double (nullable = true)
| |-- USER_FEED_REMOVE: 		double (nullable = true)
| |-- USER_PROFILE_VIEW: 		double (nullable = true)
| |-- VOTE_POLL: 			double (nullable = true)
| |-- USER_SEND_MESSAGE: 		double (nullable = true)
| |-- USER_DELETE_MESSAGE: 		double (nullable = true)
| |-- USER_INTERNAL_LIKE: 		double (nullable = true)
| |-- USER_INTERNAL_UNLIKE: 		double (nullable = true)
| |-- USER_STATUS_COMMENT_CREATE: 	double (nullable = true)
| |-- PHOTO_COMMENT_CREATE: 		double (nullable = true)
| |-- MOVIE_COMMENT_CREATE: 		double (nullable = true)
| |-- USER_PHOTO_ALBUM_COMMENT_CREATE: 	double (nullable = true)
| |-- COMMENT_INTERNAL_LIKE: 		double (nullable = true)
| |-- USER_FORUM_MESSAGE_CREATE: 	double (nullable = true) - нинада
| |-- PHOTO_MARK_CREATE: 		double (nullable = true)
| |-- PHOTO_VIEW: 			double (nullable = true)
| |-- PHOTO_PIN_BATCH_CREATE: 		double (nullable = true)
| |-- PHOTO_PIN_UPDATE: 		double (nullable = true)
| |-- USER_PRESENT_SEND: 		double (nullable = true)

|-- ownerUserCounters: 			struct (nullable = true)
 как в пункте выше

|-- membership: 			struct (nullable = false)
| |-- status: 				string (nullable = true)
| |-- statusUpdateDate: 		long (nullable = true)
| |-- joinDate: 			long (nullable = true)
| |-- joinRequestDate: 			long (nullable = true)

|-- owner: 				struct (nullable = false)
| |-- create_date: 			long (nullable = true)
| |-- birth_date: 			integer (nullable = true)
| |-- gender: 				integer (nullable = true)
| |-- status: 				integer (nullable = true)
| |-- ID_country: 			long (nullable = true)
| |-- ID_Location: 			integer (nullable = true)
| |-- is_active: 			integer (nullable = true)
| |-- is_deleted: 			integer (nullable = true)
| |-- is_abused: 			integer (nullable = true)
| |-- is_activated: 			integer (nullable = true)
| |-- change_datime: 			long (nullable = true)
| |-- is_semiactivated: 		integer (nullable = true) -
| |-- region: 				integer (nullable = true)

|-- user: 				struct (nullable = false)
 как в пункте выше

|-- feedback: 				array (nullable = true)
| |-- element: 				struct (containsNull = false)
| | |-- type: 				string (nullable = true)
| | |-- count: 				integer (nullable = true)


Parquet form:
message spark_schema {
  optional group instanceId {
    optional int32 userId;
    optional binary objectType (UTF8); Post/Photo/Video/
    optional int32 objectId;
  }
  optional group audit {
    optional int64 pos;
    optional int64 timestamp;
    optional int64 timePassed;
    optional binary experiment (UTF8);
    optional int64 resourceType;
    optional group weights {
      optional double ageMs;
      optional double ctr_gender;
      optional double ctr_high;
      optional double ctr_negative;
      optional double dailyRecency;
      optional double feedStats;
      optional double friendLikes;
      optional double friendLikes_actors;
      optional double isFavorite;
      optional double likersFeedStats_hyper;
      optional double likersSvd_prelaunch_hyper;
      optional double matrix;
      optional double ownerAge;
      optional double partAge;
      optional double partCtr;
      optional double partSvd;
      optional double relationMasks;
      optional double svd_prelaunch;
      optional double userAge;
      optional int64 x_ActorsRelations;
      optional double svd_prelaunch_nobi;
      optional double ldaIntersection;
      optional double friendCommentActors;
      optional double friendCommentFeeds;
      optional double friendCommenters;
      optional double isPymk;
    }
  }
  optional group metadata {
    optional int32 ownerId;
    optional binary ownerType (UTF8);
    optional int64 createdAt;
    optional int32 authorId;
    optional int64 applicationId;
    optional int32 numCompanions;
    optional int32 numPhotos;
    optional int32 numPolls;
    optional int32 numSymbols;
    optional int32 numTokens;
    optional int32 numVideos;
    optional binary platform (UTF8);
    optional int32 totalVideoLength;
    optional group options (LIST) {
      repeated group list {
        optional binary element (UTF8);
      }
    }
  }
  optional int64 relationsMask;
  optional group userOwnerCounters {
    optional double ignoredField;
    optional double USER_FEED_REMOVE;
    optional double USER_PROFILE_VIEW;
    optional double VOTE_POLL;
    optional double USER_SEND_MESSAGE;
    optional double USER_DELETE_MESSAGE;
    optional double USER_INTERNAL_LIKE;
    optional double USER_INTERNAL_UNLIKE;
    optional double USER_STATUS_COMMENT_CREATE;
    optional double PHOTO_COMMENT_CREATE;
    optional double MOVIE_COMMENT_CREATE;
    optional double USER_PHOTO_ALBUM_COMMENT_CREATE;
    optional double COMMENT_INTERNAL_LIKE;
    optional double USER_FORUM_MESSAGE_CREATE;
    optional double PHOTO_MARK_CREATE;
    optional double PHOTO_VIEW;
    optional double PHOTO_PIN_BATCH_CREATE;
    optional double PHOTO_PIN_UPDATE;
    optional double USER_PRESENT_SEND;
  }
  optional group ownerUserCounters {
    optional double ignoredField;
    optional double USER_FEED_REMOVE;
    optional double USER_PROFILE_VIEW;
    optional double VOTE_POLL;
    optional double USER_SEND_MESSAGE;
    optional double USER_DELETE_MESSAGE;
    optional double USER_INTERNAL_LIKE;
    optional double USER_INTERNAL_UNLIKE;
    optional double USER_STATUS_COMMENT_CREATE;
    optional double PHOTO_COMMENT_CREATE;
    optional double MOVIE_COMMENT_CREATE;
    optional double USER_PHOTO_ALBUM_COMMENT_CREATE;
    optional double COMMENT_INTERNAL_LIKE;
    optional double USER_FORUM_MESSAGE_CREATE;
    optional double PHOTO_MARK_CREATE;
    optional double PHOTO_VIEW;
    optional double PHOTO_PIN_BATCH_CREATE;
    optional double PHOTO_PIN_UPDATE;
    optional double USER_PRESENT_SEND;
  }
  optional group membership {
    optional binary status (UTF8);
    optional int64 statusUpdateDate;
    optional int64 joinDate;
    optional int64 joinRequestDate;
  }
  optional group owner {
    optional int64 create_date;
    optional int32 birth_date;
    optional int32 gender;
    optional int32 status;
    optional int64 ID_country;
    optional int32 ID_Location;
    optional int32 is_active;
    optional int32 is_deleted;
    optional int32 is_abused;
    optional int32 is_activated;
    optional int64 change_datime;
    optional int32 is_semiactivated;
    optional int32 region;
  }
  optional group user {
    optional int64 create_date;
    optional int32 birth_date;
    optional int32 gender;
    optional int32 status;
    optional int64 ID_country;
    optional int32 ID_Location;
    optional int32 is_active;
    optional int32 is_deleted;
    optional int32 is_abused;
    optional int32 is_activated;
    optional int64 change_datime;
    optional int32 is_semiactivated;
    optional int32 region;
  }
  optional group feedback (LIST) {
    repeated group list {
      optional group element {
        optional binary type (UTF8);
        optional int32 count;
      }
    }
  }
}